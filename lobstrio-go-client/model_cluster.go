/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cluster{}

// Cluster struct for Cluster
type Cluster struct {
	Id string `json:"id"`
	Object *string `json:"object,omitempty"`
	Account string `json:"account"`
	Concurrency float32 `json:"concurrency"`
	CreatedAt string `json:"created_at"`
	Crawler string `json:"crawler"`
	IsActive bool `json:"is_active"`
	Name string `json:"name"`
	Params ClusterCommonParams `json:"params"`
	Schedule string `json:"schedule"`
	TotalRuns float32 `json:"total_runs"`
}

// NewCluster instantiates a new Cluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCluster(id string, account string, concurrency float32, createdAt string, crawler string, isActive bool, name string, params ClusterCommonParams, schedule string, totalRuns float32) *Cluster {
	this := Cluster{}
	this.Id = id
	this.Account = account
	this.Concurrency = concurrency
	this.CreatedAt = createdAt
	this.Crawler = crawler
	this.IsActive = isActive
	this.Name = name
	this.Params = params
	this.Schedule = schedule
	this.TotalRuns = totalRuns
	return &this
}

// NewClusterWithDefaults instantiates a new Cluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterWithDefaults() *Cluster {
	this := Cluster{}
	return &this
}

// GetId returns the Id field value
func (o *Cluster) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Cluster) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Cluster) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Cluster) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Cluster) SetObject(v string) {
	o.Object = &v
}

// GetAccount returns the Account field value
func (o *Cluster) GetAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *Cluster) SetAccount(v string) {
	o.Account = v
}

// GetConcurrency returns the Concurrency field value
func (o *Cluster) GetConcurrency() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetConcurrencyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Concurrency, true
}

// SetConcurrency sets field value
func (o *Cluster) SetConcurrency(v float32) {
	o.Concurrency = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Cluster) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Cluster) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCrawler returns the Crawler field value
func (o *Cluster) GetCrawler() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Crawler
}

// GetCrawlerOk returns a tuple with the Crawler field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetCrawlerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Crawler, true
}

// SetCrawler sets field value
func (o *Cluster) SetCrawler(v string) {
	o.Crawler = v
}

// GetIsActive returns the IsActive field value
func (o *Cluster) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *Cluster) SetIsActive(v bool) {
	o.IsActive = v
}

// GetName returns the Name field value
func (o *Cluster) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Cluster) SetName(v string) {
	o.Name = v
}

// GetParams returns the Params field value
func (o *Cluster) GetParams() ClusterCommonParams {
	if o == nil {
		var ret ClusterCommonParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetParamsOk() (*ClusterCommonParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *Cluster) SetParams(v ClusterCommonParams) {
	o.Params = v
}

// GetSchedule returns the Schedule field value
func (o *Cluster) GetSchedule() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *Cluster) SetSchedule(v string) {
	o.Schedule = v
}

// GetTotalRuns returns the TotalRuns field value
func (o *Cluster) GetTotalRuns() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalRuns
}

// GetTotalRunsOk returns a tuple with the TotalRuns field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetTotalRunsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalRuns, true
}

// SetTotalRuns sets field value
func (o *Cluster) SetTotalRuns(v float32) {
	o.TotalRuns = v
}

func (o Cluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["account"] = o.Account
	toSerialize["concurrency"] = o.Concurrency
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["crawler"] = o.Crawler
	toSerialize["is_active"] = o.IsActive
	toSerialize["name"] = o.Name
	toSerialize["params"] = o.Params
	toSerialize["schedule"] = o.Schedule
	toSerialize["total_runs"] = o.TotalRuns
	return toSerialize, nil
}

type NullableCluster struct {
	value *Cluster
	isSet bool
}

func (v NullableCluster) Get() *Cluster {
	return v.value
}

func (v *NullableCluster) Set(val *Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCluster(val *Cluster) *NullableCluster {
	return &NullableCluster{value: val, isSet: true}
}

func (v NullableCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


