/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClusterCrawlerParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterCrawlerParams{}

// ClusterCrawlerParams struct for ClusterCrawlerParams
type ClusterCrawlerParams struct {
	Account AccountCrawlerParams `json:"account"`
	Dropcontact *ClusterCrawlerParamsDropcontact `json:"dropcontact,omitempty"`
}

// NewClusterCrawlerParams instantiates a new ClusterCrawlerParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterCrawlerParams(account AccountCrawlerParams) *ClusterCrawlerParams {
	this := ClusterCrawlerParams{}
	this.Account = account
	return &this
}

// NewClusterCrawlerParamsWithDefaults instantiates a new ClusterCrawlerParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterCrawlerParamsWithDefaults() *ClusterCrawlerParams {
	this := ClusterCrawlerParams{}
	return &this
}

// GetAccount returns the Account field value
func (o *ClusterCrawlerParams) GetAccount() AccountCrawlerParams {
	if o == nil {
		var ret AccountCrawlerParams
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *ClusterCrawlerParams) GetAccountOk() (*AccountCrawlerParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *ClusterCrawlerParams) SetAccount(v AccountCrawlerParams) {
	o.Account = v
}

// GetDropcontact returns the Dropcontact field value if set, zero value otherwise.
func (o *ClusterCrawlerParams) GetDropcontact() ClusterCrawlerParamsDropcontact {
	if o == nil || IsNil(o.Dropcontact) {
		var ret ClusterCrawlerParamsDropcontact
		return ret
	}
	return *o.Dropcontact
}

// GetDropcontactOk returns a tuple with the Dropcontact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterCrawlerParams) GetDropcontactOk() (*ClusterCrawlerParamsDropcontact, bool) {
	if o == nil || IsNil(o.Dropcontact) {
		return nil, false
	}
	return o.Dropcontact, true
}

// HasDropcontact returns a boolean if a field has been set.
func (o *ClusterCrawlerParams) HasDropcontact() bool {
	if o != nil && !IsNil(o.Dropcontact) {
		return true
	}

	return false
}

// SetDropcontact gets a reference to the given ClusterCrawlerParamsDropcontact and assigns it to the Dropcontact field.
func (o *ClusterCrawlerParams) SetDropcontact(v ClusterCrawlerParamsDropcontact) {
	o.Dropcontact = &v
}

func (o ClusterCrawlerParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterCrawlerParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account"] = o.Account
	if !IsNil(o.Dropcontact) {
		toSerialize["dropcontact"] = o.Dropcontact
	}
	return toSerialize, nil
}

type NullableClusterCrawlerParams struct {
	value *ClusterCrawlerParams
	isSet bool
}

func (v NullableClusterCrawlerParams) Get() *ClusterCrawlerParams {
	return v.value
}

func (v *NullableClusterCrawlerParams) Set(val *ClusterCrawlerParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterCrawlerParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterCrawlerParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterCrawlerParams(val *ClusterCrawlerParams) *NullableClusterCrawlerParams {
	return &NullableClusterCrawlerParams{value: val, isSet: true}
}

func (v NullableClusterCrawlerParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterCrawlerParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


