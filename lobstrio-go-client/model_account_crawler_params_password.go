/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountCrawlerParamsPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountCrawlerParamsPassword{}

// AccountCrawlerParamsPassword struct for AccountCrawlerParamsPassword
type AccountCrawlerParamsPassword struct {
	Description *string `json:"description,omitempty"`
	Type *string `json:"type,omitempty"`
	Required *bool `json:"required,omitempty"`
}

// NewAccountCrawlerParamsPassword instantiates a new AccountCrawlerParamsPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountCrawlerParamsPassword() *AccountCrawlerParamsPassword {
	this := AccountCrawlerParamsPassword{}
	return &this
}

// NewAccountCrawlerParamsPasswordWithDefaults instantiates a new AccountCrawlerParamsPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountCrawlerParamsPasswordWithDefaults() *AccountCrawlerParamsPassword {
	this := AccountCrawlerParamsPassword{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AccountCrawlerParamsPassword) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCrawlerParamsPassword) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AccountCrawlerParamsPassword) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AccountCrawlerParamsPassword) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccountCrawlerParamsPassword) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCrawlerParamsPassword) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccountCrawlerParamsPassword) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AccountCrawlerParamsPassword) SetType(v string) {
	o.Type = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *AccountCrawlerParamsPassword) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCrawlerParamsPassword) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *AccountCrawlerParamsPassword) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *AccountCrawlerParamsPassword) SetRequired(v bool) {
	o.Required = &v
}

func (o AccountCrawlerParamsPassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountCrawlerParamsPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableAccountCrawlerParamsPassword struct {
	value *AccountCrawlerParamsPassword
	isSet bool
}

func (v NullableAccountCrawlerParamsPassword) Get() *AccountCrawlerParamsPassword {
	return v.value
}

func (v *NullableAccountCrawlerParamsPassword) Set(val *AccountCrawlerParamsPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountCrawlerParamsPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountCrawlerParamsPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountCrawlerParamsPassword(val *AccountCrawlerParamsPassword) *NullableAccountCrawlerParamsPassword {
	return &NullableAccountCrawlerParamsPassword{value: val, isSet: true}
}

func (v NullableAccountCrawlerParamsPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountCrawlerParamsPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


