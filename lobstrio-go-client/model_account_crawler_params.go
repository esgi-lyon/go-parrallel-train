/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountCrawlerParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountCrawlerParams{}

// AccountCrawlerParams struct for AccountCrawlerParams
type AccountCrawlerParams struct {
	Email *AccountCrawlerParamsEmail `json:"email,omitempty"`
	Password *AccountCrawlerParamsPassword `json:"password,omitempty"`
	Type string `json:"type"`
}

// NewAccountCrawlerParams instantiates a new AccountCrawlerParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountCrawlerParams(type_ string) *AccountCrawlerParams {
	this := AccountCrawlerParams{}
	this.Type = type_
	return &this
}

// NewAccountCrawlerParamsWithDefaults instantiates a new AccountCrawlerParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountCrawlerParamsWithDefaults() *AccountCrawlerParams {
	this := AccountCrawlerParams{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AccountCrawlerParams) GetEmail() AccountCrawlerParamsEmail {
	if o == nil || IsNil(o.Email) {
		var ret AccountCrawlerParamsEmail
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCrawlerParams) GetEmailOk() (*AccountCrawlerParamsEmail, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AccountCrawlerParams) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given AccountCrawlerParamsEmail and assigns it to the Email field.
func (o *AccountCrawlerParams) SetEmail(v AccountCrawlerParamsEmail) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AccountCrawlerParams) GetPassword() AccountCrawlerParamsPassword {
	if o == nil || IsNil(o.Password) {
		var ret AccountCrawlerParamsPassword
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCrawlerParams) GetPasswordOk() (*AccountCrawlerParamsPassword, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AccountCrawlerParams) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given AccountCrawlerParamsPassword and assigns it to the Password field.
func (o *AccountCrawlerParams) SetPassword(v AccountCrawlerParamsPassword) {
	o.Password = &v
}

// GetType returns the Type field value
func (o *AccountCrawlerParams) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccountCrawlerParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccountCrawlerParams) SetType(v string) {
	o.Type = v
}

func (o AccountCrawlerParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountCrawlerParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableAccountCrawlerParams struct {
	value *AccountCrawlerParams
	isSet bool
}

func (v NullableAccountCrawlerParams) Get() *AccountCrawlerParams {
	return v.value
}

func (v *NullableAccountCrawlerParams) Set(val *AccountCrawlerParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountCrawlerParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountCrawlerParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountCrawlerParams(val *AccountCrawlerParams) *NullableAccountCrawlerParams {
	return &NullableAccountCrawlerParams{value: val, isSet: true}
}

func (v NullableAccountCrawlerParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountCrawlerParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


