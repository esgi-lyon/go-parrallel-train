/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClusterCommonParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterCommonParams{}

// ClusterCommonParams struct for ClusterCommonParams
type ClusterCommonParams struct {
	Dropcontact *bool `json:"dropcontact,omitempty"`
	MaxPages *float32 `json:"max_pages,omitempty"`
}

// NewClusterCommonParams instantiates a new ClusterCommonParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterCommonParams() *ClusterCommonParams {
	this := ClusterCommonParams{}
	return &this
}

// NewClusterCommonParamsWithDefaults instantiates a new ClusterCommonParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterCommonParamsWithDefaults() *ClusterCommonParams {
	this := ClusterCommonParams{}
	return &this
}

// GetDropcontact returns the Dropcontact field value if set, zero value otherwise.
func (o *ClusterCommonParams) GetDropcontact() bool {
	if o == nil || IsNil(o.Dropcontact) {
		var ret bool
		return ret
	}
	return *o.Dropcontact
}

// GetDropcontactOk returns a tuple with the Dropcontact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterCommonParams) GetDropcontactOk() (*bool, bool) {
	if o == nil || IsNil(o.Dropcontact) {
		return nil, false
	}
	return o.Dropcontact, true
}

// HasDropcontact returns a boolean if a field has been set.
func (o *ClusterCommonParams) HasDropcontact() bool {
	if o != nil && !IsNil(o.Dropcontact) {
		return true
	}

	return false
}

// SetDropcontact gets a reference to the given bool and assigns it to the Dropcontact field.
func (o *ClusterCommonParams) SetDropcontact(v bool) {
	o.Dropcontact = &v
}

// GetMaxPages returns the MaxPages field value if set, zero value otherwise.
func (o *ClusterCommonParams) GetMaxPages() float32 {
	if o == nil || IsNil(o.MaxPages) {
		var ret float32
		return ret
	}
	return *o.MaxPages
}

// GetMaxPagesOk returns a tuple with the MaxPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterCommonParams) GetMaxPagesOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxPages) {
		return nil, false
	}
	return o.MaxPages, true
}

// HasMaxPages returns a boolean if a field has been set.
func (o *ClusterCommonParams) HasMaxPages() bool {
	if o != nil && !IsNil(o.MaxPages) {
		return true
	}

	return false
}

// SetMaxPages gets a reference to the given float32 and assigns it to the MaxPages field.
func (o *ClusterCommonParams) SetMaxPages(v float32) {
	o.MaxPages = &v
}

func (o ClusterCommonParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterCommonParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dropcontact) {
		toSerialize["dropcontact"] = o.Dropcontact
	}
	if !IsNil(o.MaxPages) {
		toSerialize["max_pages"] = o.MaxPages
	}
	return toSerialize, nil
}

type NullableClusterCommonParams struct {
	value *ClusterCommonParams
	isSet bool
}

func (v NullableClusterCommonParams) Get() *ClusterCommonParams {
	return v.value
}

func (v *NullableClusterCommonParams) Set(val *ClusterCommonParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterCommonParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterCommonParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterCommonParams(val *ClusterCommonParams) *NullableClusterCommonParams {
	return &NullableClusterCommonParams{value: val, isSet: true}
}

func (v NullableClusterCommonParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterCommonParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


