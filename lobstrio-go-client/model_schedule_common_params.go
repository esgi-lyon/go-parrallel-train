/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScheduleCommonParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleCommonParams{}

// ScheduleCommonParams struct for ScheduleCommonParams
type ScheduleCommonParams struct {
	CronExpression string `json:"cron_expression"`
	Description *string `json:"description,omitempty"`
	Name string `json:"name"`
}

// NewScheduleCommonParams instantiates a new ScheduleCommonParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleCommonParams(cronExpression string, name string) *ScheduleCommonParams {
	this := ScheduleCommonParams{}
	this.CronExpression = cronExpression
	this.Name = name
	return &this
}

// NewScheduleCommonParamsWithDefaults instantiates a new ScheduleCommonParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleCommonParamsWithDefaults() *ScheduleCommonParams {
	this := ScheduleCommonParams{}
	return &this
}

// GetCronExpression returns the CronExpression field value
func (o *ScheduleCommonParams) GetCronExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value
// and a boolean to check if the value has been set.
func (o *ScheduleCommonParams) GetCronExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CronExpression, true
}

// SetCronExpression sets field value
func (o *ScheduleCommonParams) SetCronExpression(v string) {
	o.CronExpression = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScheduleCommonParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCommonParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScheduleCommonParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScheduleCommonParams) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *ScheduleCommonParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScheduleCommonParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScheduleCommonParams) SetName(v string) {
	o.Name = v
}

func (o ScheduleCommonParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleCommonParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cron_expression"] = o.CronExpression
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableScheduleCommonParams struct {
	value *ScheduleCommonParams
	isSet bool
}

func (v NullableScheduleCommonParams) Get() *ScheduleCommonParams {
	return v.value
}

func (v *NullableScheduleCommonParams) Set(val *ScheduleCommonParams) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleCommonParams) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleCommonParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleCommonParams(val *ScheduleCommonParams) *NullableScheduleCommonParams {
	return &NullableScheduleCommonParams{value: val, isSet: true}
}

func (v NullableScheduleCommonParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleCommonParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


