/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListSchedules200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSchedules200Response{}

// ListSchedules200Response struct for ListSchedules200Response
type ListSchedules200Response struct {
	Count *float32 `json:"count,omitempty"`
	// page number
	Page float32 `json:"page"`
	// number of items returned max
	Limit float32 `json:"limit"`
	Runs []interface{} `json:"runs,omitempty"`
}

// NewListSchedules200Response instantiates a new ListSchedules200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSchedules200Response(page float32, limit float32) *ListSchedules200Response {
	this := ListSchedules200Response{}
	this.Page = page
	this.Limit = limit
	return &this
}

// NewListSchedules200ResponseWithDefaults instantiates a new ListSchedules200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSchedules200ResponseWithDefaults() *ListSchedules200Response {
	this := ListSchedules200Response{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ListSchedules200Response) GetCount() float32 {
	if o == nil || IsNil(o.Count) {
		var ret float32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSchedules200Response) GetCountOk() (*float32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ListSchedules200Response) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float32 and assigns it to the Count field.
func (o *ListSchedules200Response) SetCount(v float32) {
	o.Count = &v
}

// GetPage returns the Page field value
func (o *ListSchedules200Response) GetPage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *ListSchedules200Response) GetPageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *ListSchedules200Response) SetPage(v float32) {
	o.Page = v
}

// GetLimit returns the Limit field value
func (o *ListSchedules200Response) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ListSchedules200Response) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ListSchedules200Response) SetLimit(v float32) {
	o.Limit = v
}

// GetRuns returns the Runs field value if set, zero value otherwise.
func (o *ListSchedules200Response) GetRuns() []interface{} {
	if o == nil || IsNil(o.Runs) {
		var ret []interface{}
		return ret
	}
	return o.Runs
}

// GetRunsOk returns a tuple with the Runs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSchedules200Response) GetRunsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Runs) {
		return nil, false
	}
	return o.Runs, true
}

// HasRuns returns a boolean if a field has been set.
func (o *ListSchedules200Response) HasRuns() bool {
	if o != nil && !IsNil(o.Runs) {
		return true
	}

	return false
}

// SetRuns gets a reference to the given []interface{} and assigns it to the Runs field.
func (o *ListSchedules200Response) SetRuns(v []interface{}) {
	o.Runs = v
}

func (o ListSchedules200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSchedules200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	toSerialize["page"] = o.Page
	toSerialize["limit"] = o.Limit
	if !IsNil(o.Runs) {
		toSerialize["runs"] = o.Runs
	}
	return toSerialize, nil
}

type NullableListSchedules200Response struct {
	value *ListSchedules200Response
	isSet bool
}

func (v NullableListSchedules200Response) Get() *ListSchedules200Response {
	return v.value
}

func (v *NullableListSchedules200Response) Set(val *ListSchedules200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListSchedules200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListSchedules200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSchedules200Response(val *ListSchedules200Response) *NullableListSchedules200Response {
	return &NullableListSchedules200Response{value: val, isSet: true}
}

func (v NullableListSchedules200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSchedules200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


