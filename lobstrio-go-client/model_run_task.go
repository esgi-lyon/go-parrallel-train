/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunTask{}

// RunTask struct for RunTask
type RunTask struct {
	Id *string `json:"id,omitempty"`
	Object *string `json:"object,omitempty"`
	// date of creation (ISO8601 format)
	CreatedAt *string `json:"created_at,omitempty"`
	Duration *float32 `json:"duration,omitempty"`
	// date of creation (ISO8601 format)`
	EndedAt *string `json:"ended_at,omitempty"`
	IsDone *bool `json:"is_done,omitempty"`
	IsError *string `json:"is_error,omitempty"`
	LastPage *float32 `json:"last_page,omitempty"`
	LastResult *float32 `json:"last_result,omitempty"`
	Task *string `json:"task,omitempty"`
	Run *string `json:"run,omitempty"`
	// date of creation (ISO8601 format)
	StartedAt *string `json:"started_at,omitempty"`
	TotalPages *float32 `json:"total_pages,omitempty"`
	TotalResults *float32 `json:"total_results,omitempty"`
}

// NewRunTask instantiates a new RunTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunTask() *RunTask {
	this := RunTask{}
	return &this
}

// NewRunTaskWithDefaults instantiates a new RunTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunTaskWithDefaults() *RunTask {
	this := RunTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RunTask) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RunTask) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RunTask) SetId(v string) {
	o.Id = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *RunTask) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *RunTask) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *RunTask) SetObject(v string) {
	o.Object = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RunTask) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RunTask) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RunTask) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *RunTask) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *RunTask) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *RunTask) SetDuration(v float32) {
	o.Duration = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *RunTask) GetEndedAt() string {
	if o == nil || IsNil(o.EndedAt) {
		var ret string
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetEndedAtOk() (*string, bool) {
	if o == nil || IsNil(o.EndedAt) {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *RunTask) HasEndedAt() bool {
	if o != nil && !IsNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given string and assigns it to the EndedAt field.
func (o *RunTask) SetEndedAt(v string) {
	o.EndedAt = &v
}

// GetIsDone returns the IsDone field value if set, zero value otherwise.
func (o *RunTask) GetIsDone() bool {
	if o == nil || IsNil(o.IsDone) {
		var ret bool
		return ret
	}
	return *o.IsDone
}

// GetIsDoneOk returns a tuple with the IsDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetIsDoneOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDone) {
		return nil, false
	}
	return o.IsDone, true
}

// HasIsDone returns a boolean if a field has been set.
func (o *RunTask) HasIsDone() bool {
	if o != nil && !IsNil(o.IsDone) {
		return true
	}

	return false
}

// SetIsDone gets a reference to the given bool and assigns it to the IsDone field.
func (o *RunTask) SetIsDone(v bool) {
	o.IsDone = &v
}

// GetIsError returns the IsError field value if set, zero value otherwise.
func (o *RunTask) GetIsError() string {
	if o == nil || IsNil(o.IsError) {
		var ret string
		return ret
	}
	return *o.IsError
}

// GetIsErrorOk returns a tuple with the IsError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetIsErrorOk() (*string, bool) {
	if o == nil || IsNil(o.IsError) {
		return nil, false
	}
	return o.IsError, true
}

// HasIsError returns a boolean if a field has been set.
func (o *RunTask) HasIsError() bool {
	if o != nil && !IsNil(o.IsError) {
		return true
	}

	return false
}

// SetIsError gets a reference to the given string and assigns it to the IsError field.
func (o *RunTask) SetIsError(v string) {
	o.IsError = &v
}

// GetLastPage returns the LastPage field value if set, zero value otherwise.
func (o *RunTask) GetLastPage() float32 {
	if o == nil || IsNil(o.LastPage) {
		var ret float32
		return ret
	}
	return *o.LastPage
}

// GetLastPageOk returns a tuple with the LastPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetLastPageOk() (*float32, bool) {
	if o == nil || IsNil(o.LastPage) {
		return nil, false
	}
	return o.LastPage, true
}

// HasLastPage returns a boolean if a field has been set.
func (o *RunTask) HasLastPage() bool {
	if o != nil && !IsNil(o.LastPage) {
		return true
	}

	return false
}

// SetLastPage gets a reference to the given float32 and assigns it to the LastPage field.
func (o *RunTask) SetLastPage(v float32) {
	o.LastPage = &v
}

// GetLastResult returns the LastResult field value if set, zero value otherwise.
func (o *RunTask) GetLastResult() float32 {
	if o == nil || IsNil(o.LastResult) {
		var ret float32
		return ret
	}
	return *o.LastResult
}

// GetLastResultOk returns a tuple with the LastResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetLastResultOk() (*float32, bool) {
	if o == nil || IsNil(o.LastResult) {
		return nil, false
	}
	return o.LastResult, true
}

// HasLastResult returns a boolean if a field has been set.
func (o *RunTask) HasLastResult() bool {
	if o != nil && !IsNil(o.LastResult) {
		return true
	}

	return false
}

// SetLastResult gets a reference to the given float32 and assigns it to the LastResult field.
func (o *RunTask) SetLastResult(v float32) {
	o.LastResult = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *RunTask) GetTask() string {
	if o == nil || IsNil(o.Task) {
		var ret string
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetTaskOk() (*string, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *RunTask) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given string and assigns it to the Task field.
func (o *RunTask) SetTask(v string) {
	o.Task = &v
}

// GetRun returns the Run field value if set, zero value otherwise.
func (o *RunTask) GetRun() string {
	if o == nil || IsNil(o.Run) {
		var ret string
		return ret
	}
	return *o.Run
}

// GetRunOk returns a tuple with the Run field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetRunOk() (*string, bool) {
	if o == nil || IsNil(o.Run) {
		return nil, false
	}
	return o.Run, true
}

// HasRun returns a boolean if a field has been set.
func (o *RunTask) HasRun() bool {
	if o != nil && !IsNil(o.Run) {
		return true
	}

	return false
}

// SetRun gets a reference to the given string and assigns it to the Run field.
func (o *RunTask) SetRun(v string) {
	o.Run = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *RunTask) GetStartedAt() string {
	if o == nil || IsNil(o.StartedAt) {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetStartedAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *RunTask) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *RunTask) SetStartedAt(v string) {
	o.StartedAt = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *RunTask) GetTotalPages() float32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret float32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetTotalPagesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *RunTask) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given float32 and assigns it to the TotalPages field.
func (o *RunTask) SetTotalPages(v float32) {
	o.TotalPages = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *RunTask) GetTotalResults() float32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret float32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTask) GetTotalResultsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *RunTask) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given float32 and assigns it to the TotalResults field.
func (o *RunTask) SetTotalResults(v float32) {
	o.TotalResults = &v
}

func (o RunTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.EndedAt) {
		toSerialize["ended_at"] = o.EndedAt
	}
	if !IsNil(o.IsDone) {
		toSerialize["is_done"] = o.IsDone
	}
	if !IsNil(o.IsError) {
		toSerialize["is_error"] = o.IsError
	}
	if !IsNil(o.LastPage) {
		toSerialize["last_page"] = o.LastPage
	}
	if !IsNil(o.LastResult) {
		toSerialize["last_result"] = o.LastResult
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.Run) {
		toSerialize["run"] = o.Run
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.TotalPages) {
		toSerialize["total_pages"] = o.TotalPages
	}
	if !IsNil(o.TotalResults) {
		toSerialize["total_results"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableRunTask struct {
	value *RunTask
	isSet bool
}

func (v NullableRunTask) Get() *RunTask {
	return v.value
}

func (v *NullableRunTask) Set(val *RunTask) {
	v.value = val
	v.isSet = true
}

func (v NullableRunTask) IsSet() bool {
	return v.isSet
}

func (v *NullableRunTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunTask(val *RunTask) *NullableRunTask {
	return &NullableRunTask{value: val, isSet: true}
}

func (v NullableRunTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


