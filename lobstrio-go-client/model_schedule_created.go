/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScheduleCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleCreated{}

// ScheduleCreated struct for ScheduleCreated
type ScheduleCreated struct {
	// unique id
	Id string `json:"id"`
	Object *string `json:"object,omitempty"`
	// date of creation (ISO8601 format)
	CreatedAt *string `json:"created_at,omitempty"`
	// frequency of execution
	CronExpression string `json:"cron_expression"`
	Description *string `json:"description,omitempty"`
	Name string `json:"name"`
}

// NewScheduleCreated instantiates a new ScheduleCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleCreated(id string, cronExpression string, name string) *ScheduleCreated {
	this := ScheduleCreated{}
	this.Id = id
	this.CronExpression = cronExpression
	this.Name = name
	return &this
}

// NewScheduleCreatedWithDefaults instantiates a new ScheduleCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleCreatedWithDefaults() *ScheduleCreated {
	this := ScheduleCreated{}
	return &this
}

// GetId returns the Id field value
func (o *ScheduleCreated) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScheduleCreated) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScheduleCreated) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ScheduleCreated) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCreated) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ScheduleCreated) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ScheduleCreated) SetObject(v string) {
	o.Object = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ScheduleCreated) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCreated) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ScheduleCreated) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ScheduleCreated) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCronExpression returns the CronExpression field value
func (o *ScheduleCreated) GetCronExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value
// and a boolean to check if the value has been set.
func (o *ScheduleCreated) GetCronExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CronExpression, true
}

// SetCronExpression sets field value
func (o *ScheduleCreated) SetCronExpression(v string) {
	o.CronExpression = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScheduleCreated) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCreated) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScheduleCreated) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScheduleCreated) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *ScheduleCreated) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScheduleCreated) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScheduleCreated) SetName(v string) {
	o.Name = v
}

func (o ScheduleCreated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	toSerialize["cron_expression"] = o.CronExpression
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableScheduleCreated struct {
	value *ScheduleCreated
	isSet bool
}

func (v NullableScheduleCreated) Get() *ScheduleCreated {
	return v.value
}

func (v *NullableScheduleCreated) Set(val *ScheduleCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleCreated(val *ScheduleCreated) *NullableScheduleCreated {
	return &NullableScheduleCreated{value: val, isSet: true}
}

func (v NullableScheduleCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


