/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account struct for Account
type Account struct {
	Id string `json:"id"`
	Object *string `json:"object,omitempty"`
	// date of creation (ISO8601 format)
	CreatedAt *string `json:"created_at,omitempty"`
	// date of last synchronization (ISO8601 format)
	LastSynchronizationTime *string `json:"last_synchronization_time,omitempty"`
	Name *string `json:"name,omitempty"`
	Status float32 `json:"status"`
	StatusCodeInfo string `json:"status_code_info"`
	StatusCodeDescription string `json:"status_code_description"`
	// total synchronizations
	TotalSynchronizations *float32 `json:"total_synchronizations,omitempty"`
	Type string `json:"type"`
	// date of creation (ISO8601 format)
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(id string, status float32, statusCodeInfo string, statusCodeDescription string, type_ string) *Account {
	this := Account{}
	this.Id = id
	this.Status = status
	this.StatusCodeInfo = statusCodeInfo
	this.StatusCodeDescription = statusCodeDescription
	this.Type = type_
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetId returns the Id field value
func (o *Account) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Account) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Account) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Account) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Account) SetObject(v string) {
	o.Object = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Account) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Account) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Account) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetLastSynchronizationTime returns the LastSynchronizationTime field value if set, zero value otherwise.
func (o *Account) GetLastSynchronizationTime() string {
	if o == nil || IsNil(o.LastSynchronizationTime) {
		var ret string
		return ret
	}
	return *o.LastSynchronizationTime
}

// GetLastSynchronizationTimeOk returns a tuple with the LastSynchronizationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetLastSynchronizationTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastSynchronizationTime) {
		return nil, false
	}
	return o.LastSynchronizationTime, true
}

// HasLastSynchronizationTime returns a boolean if a field has been set.
func (o *Account) HasLastSynchronizationTime() bool {
	if o != nil && !IsNil(o.LastSynchronizationTime) {
		return true
	}

	return false
}

// SetLastSynchronizationTime gets a reference to the given string and assigns it to the LastSynchronizationTime field.
func (o *Account) SetLastSynchronizationTime(v string) {
	o.LastSynchronizationTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Account) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Account) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Account) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value
func (o *Account) GetStatus() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Account) GetStatusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Account) SetStatus(v float32) {
	o.Status = v
}

// GetStatusCodeInfo returns the StatusCodeInfo field value
func (o *Account) GetStatusCodeInfo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusCodeInfo
}

// GetStatusCodeInfoOk returns a tuple with the StatusCodeInfo field value
// and a boolean to check if the value has been set.
func (o *Account) GetStatusCodeInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCodeInfo, true
}

// SetStatusCodeInfo sets field value
func (o *Account) SetStatusCodeInfo(v string) {
	o.StatusCodeInfo = v
}

// GetStatusCodeDescription returns the StatusCodeDescription field value
func (o *Account) GetStatusCodeDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusCodeDescription
}

// GetStatusCodeDescriptionOk returns a tuple with the StatusCodeDescription field value
// and a boolean to check if the value has been set.
func (o *Account) GetStatusCodeDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCodeDescription, true
}

// SetStatusCodeDescription sets field value
func (o *Account) SetStatusCodeDescription(v string) {
	o.StatusCodeDescription = v
}

// GetTotalSynchronizations returns the TotalSynchronizations field value if set, zero value otherwise.
func (o *Account) GetTotalSynchronizations() float32 {
	if o == nil || IsNil(o.TotalSynchronizations) {
		var ret float32
		return ret
	}
	return *o.TotalSynchronizations
}

// GetTotalSynchronizationsOk returns a tuple with the TotalSynchronizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTotalSynchronizationsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalSynchronizations) {
		return nil, false
	}
	return o.TotalSynchronizations, true
}

// HasTotalSynchronizations returns a boolean if a field has been set.
func (o *Account) HasTotalSynchronizations() bool {
	if o != nil && !IsNil(o.TotalSynchronizations) {
		return true
	}

	return false
}

// SetTotalSynchronizations gets a reference to the given float32 and assigns it to the TotalSynchronizations field.
func (o *Account) SetTotalSynchronizations(v float32) {
	o.TotalSynchronizations = &v
}

// GetType returns the Type field value
func (o *Account) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Account) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Account) SetType(v string) {
	o.Type = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Account) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Account) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Account) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.LastSynchronizationTime) {
		toSerialize["last_synchronization_time"] = o.LastSynchronizationTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["status"] = o.Status
	toSerialize["status_code_info"] = o.StatusCodeInfo
	toSerialize["status_code_description"] = o.StatusCodeDescription
	if !IsNil(o.TotalSynchronizations) {
		toSerialize["total_synchronizations"] = o.TotalSynchronizations
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


