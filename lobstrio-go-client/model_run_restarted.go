/*
lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.  ## Authentication  All requests must include the `Authorization` headers. You can obtain these from the settings menu.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunRestarted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunRestarted{}

// RunRestarted struct for RunRestarted
type RunRestarted struct {
	// unique id
	Id string `json:"id"`
	Object *string `json:"object,omitempty"`
	DownloadLink *string `json:"download_link,omitempty"`
	EndedAt *string `json:"ended_at,omitempty"`
	Origin string `json:"origin"`
	// date of next run (ISO8601 format)
	StartedAt *string `json:"started_at,omitempty"`
	Status string `json:"status"`
}

// NewRunRestarted instantiates a new RunRestarted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunRestarted(id string, origin string, status string) *RunRestarted {
	this := RunRestarted{}
	this.Id = id
	this.Origin = origin
	this.Status = status
	return &this
}

// NewRunRestartedWithDefaults instantiates a new RunRestarted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunRestartedWithDefaults() *RunRestarted {
	this := RunRestarted{}
	return &this
}

// GetId returns the Id field value
func (o *RunRestarted) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RunRestarted) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RunRestarted) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *RunRestarted) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunRestarted) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *RunRestarted) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *RunRestarted) SetObject(v string) {
	o.Object = &v
}

// GetDownloadLink returns the DownloadLink field value if set, zero value otherwise.
func (o *RunRestarted) GetDownloadLink() string {
	if o == nil || IsNil(o.DownloadLink) {
		var ret string
		return ret
	}
	return *o.DownloadLink
}

// GetDownloadLinkOk returns a tuple with the DownloadLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunRestarted) GetDownloadLinkOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadLink) {
		return nil, false
	}
	return o.DownloadLink, true
}

// HasDownloadLink returns a boolean if a field has been set.
func (o *RunRestarted) HasDownloadLink() bool {
	if o != nil && !IsNil(o.DownloadLink) {
		return true
	}

	return false
}

// SetDownloadLink gets a reference to the given string and assigns it to the DownloadLink field.
func (o *RunRestarted) SetDownloadLink(v string) {
	o.DownloadLink = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *RunRestarted) GetEndedAt() string {
	if o == nil || IsNil(o.EndedAt) {
		var ret string
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunRestarted) GetEndedAtOk() (*string, bool) {
	if o == nil || IsNil(o.EndedAt) {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *RunRestarted) HasEndedAt() bool {
	if o != nil && !IsNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given string and assigns it to the EndedAt field.
func (o *RunRestarted) SetEndedAt(v string) {
	o.EndedAt = &v
}

// GetOrigin returns the Origin field value
func (o *RunRestarted) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *RunRestarted) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *RunRestarted) SetOrigin(v string) {
	o.Origin = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *RunRestarted) GetStartedAt() string {
	if o == nil || IsNil(o.StartedAt) {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunRestarted) GetStartedAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *RunRestarted) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *RunRestarted) SetStartedAt(v string) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value
func (o *RunRestarted) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RunRestarted) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RunRestarted) SetStatus(v string) {
	o.Status = v
}

func (o RunRestarted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunRestarted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.DownloadLink) {
		toSerialize["download_link"] = o.DownloadLink
	}
	if !IsNil(o.EndedAt) {
		toSerialize["ended_at"] = o.EndedAt
	}
	toSerialize["origin"] = o.Origin
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableRunRestarted struct {
	value *RunRestarted
	isSet bool
}

func (v NullableRunRestarted) Get() *RunRestarted {
	return v.value
}

func (v *NullableRunRestarted) Set(val *RunRestarted) {
	v.value = val
	v.isSet = true
}

func (v NullableRunRestarted) IsSet() bool {
	return v.isSet
}

func (v *NullableRunRestarted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunRestarted(val *RunRestarted) *NullableRunRestarted {
	return &NullableRunRestarted{value: val, isSet: true}
}

func (v NullableRunRestarted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunRestarted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


