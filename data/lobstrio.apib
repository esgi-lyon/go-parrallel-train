FORMAT: 1A
HOST: https://api.lobstr.io/v1/

# lobstr API v1

Lobstr API is an easy-to-implement API to launch already-made data crawlers, handle accounts and schedules, and collect results.
## Authentication 

All requests must include the `Authorization` headers. You can obtain these from the settings menu.

## Clusters [/clusters]

A `Cluster` is a group of tasks related to a ready-made collection tool 
a.k.a a `Crawler`.

### Create Cluster [POST /clusters]

+ Request Create Cluster (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN
        
    + Attributes (ClusterCommonAttribsCreation)
    
    
+ Response 201 (application/json)
    + Attributes (ClusterCreated)
    

### Get Cluster [GET /clusters/:id]

+ Request Get Cluster (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (Cluster)


### Update Cluster [POST /clusters/:id]

+ Request Update Cluster (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN
    
    + Attributes (ClusterCommonAttribsUpdate)
    
+ Response 201 (application/json)
    + Attributes (Cluster)
    
    
### Empty Cluster [POST /clusters/:id/empty]

+ Request Empty Cluster (application/json)
    + Headers
        Authorization: Token SECRET_TOKEN
    
+ Response 201 (application/json)
    + Attributes (EmptiedCluster)
    

### Delete Cluster [DELETE /clusters/:id]

+ Request Delete Cluster (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 204 (application/json)
    + Attributes (ClusterDeleted)


### List Clusters [GET /clusters?page={page}&limit={limit}]

+ Request List Clusters (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Parameters
    + page: 1 (required, number) ... the page
    + limit: 10 (optional, number) ... number of items to return
        + Default: 50
        
+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) — total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + data (array[Cluster])


## Tasks [/tasks]

A `Task` is a unique item, which contains all inputs the crawler needs 
to access, and collect data e.g. starting `url`, `max_page` etc. It's 
always contained in a `Cluster`.


### Create Task [POST /tasks]

+ Request Create Task (application/json)
    
    + Headers
    
        Authorization: Token SECRET_TOKEN
    
    + Attributes
        + cluster: 6fbfd5e68d3306e51350bea0232f8fa5 (required, string)
        + tasks (array[TaskCommonParams])
        

+ Response 201 (application/json)
    + Attributes (TaskCreated)

### Get Task [GET /tasks/:id]

+ Request Get Task (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (Task)

### Activate Task [POST /tasks/:id/activate]

+ Request Activate Task (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 201 (application/json)
    + Attributes (TaskActivated)

### Deactivate Task [POST /tasks/:id/deactivate]

+ Request Deactivate Task (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 201 (application/json)
    + Attributes (TaskDeactivated)

### Delete Task [DELETE /tasks/:id]

+ Request Delete Task (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 204 (application/json)
    + Attributes (TaskDeleted)

### List Tasks [GET /tasks?page={page}&limit={limit}]
    
+ Request List Tasks (application/json)
        
    + Headers 
        Authorization: Token SECRET_TOKEN
    
    + Attributes
        + cluster: '65b9eea6e1cc6bb9f0cd2a47751a186f' (optional, string) 

+ Parameters
        + page: 1 (required, number) ... the page
        + limit: 10 (optional, number) ... number of items to return
            + Default: 50
    
        
+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) — total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + data (array[Task])

      

## Runs [/runs]

Once the crawler starts the collection of all `Tasks` from a `Cluster`, a `Run` object is created.

### Launch Run [POST /runs]

+ Request Create Run (application/json)
    + Headers
        Authorization: Token SECRET_TOKEN
    
    + Attributes
        + cluster: '65b9eea6e1cc6bb9f0cd2a47751a186f' (required, string) 

+ Response 200 (application/json)
    + Attributes (RunCreated)


### Get Run [GET /runs/:id]

+ Request Get Run (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (Run)
    

### Get Run Stats [GET /runs/:id/stats]

+ Request Get Run Stats (application/json)
    + Headers
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (RunStats)

### Abort Run [POST /runs/:id/abort]

+ Request Abort Run (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (RunAborted)


### Download Run [GET /runs/:id/download]

+ Request Download Run (application/json)
    + Headers
        Authorization: Token SECRET_TOKEN
    
+ Response 200 (application/json)
    + Attributes (RunDownloaded)


### Delete Run [DELETE /runs/:id]

+ Request Start Run (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN
        
+ Response 204 (application/json)
    + Attributes (RunDeleted)

### List Runs [GET /runs?page={page}&limit={limit}]

+ Request List Runs (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN
    
    + Attributes
        + cluster: '65b9eea6e1cc6bb9f0cd2a47751a186f' (optional, string) 

+ Parameters
    + page: 1 (required, number) ... the page
    + limit: 10 (optional, number) ... number of items to return
        + Default: 50
        
+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) — total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + data (array[Run])

## RunTasks [/runtasks]

A `RunTask` is created when a `Task` is consumed within a `Run`.

### List RunTasks [GET /runtasks?page={page}&limit={limit}]

+ Request List RunTasks
    + Headers
        Authorization: Token SECRET_TOKEN
    
    + Attributes
        + run: 'd2ddea18f00665ce8623e36bd4e3c7c5' (optional, string) 
        + task: '289dff07669d7a23de0ef88d2f7129e7' (optional, string) 

+ Parameters
    + page: 1 (required, number) ... the page
    + limit: 10 (optional, number) ... number of items to return
        + Default: 50

+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) — total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + data (array[RunTask])

      
### Get RunTask [GET /runtasks/:id]

+ Request Get RunTask
    + Headers
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (RunTask)


## Results [/results]

`Results` is data collected from a `Job`. Juicy!

### List Results [GET /results]

+ Request List Results (application/json)
    + Headers
        Authorization: Token SECRET_TOKEN
    
    + Attributes
        + cluster: '65b9eea6e1cc6bb9f0cd2a47751a186f' (required, string)
        + run: 'd2ddea18f00665ce8623e36bd4e3c7c5' (optional, string)
        + task: '2e3c3b47a66fe2faa20c78a3a130b9e3' (optional, string)

+ Parameters
    + page: 1 (required, number) ... the page
    + limit: 10 (optional, number) ... number of items to return
        + Default: 50

+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) — total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + data (array[Result])


### Get Result [GET /results/:id]

+ Request Get Results 
    + Headers
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (Result)

## Schedules [/schedules]

The `Schedule` tells your `Cluster` how often it needs to be launched.

### Create Schedule [POST /schedules]

+ Request Create Schedule (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN
    
    + Attributes (ScheduleCommonParams)

+ Response 201 (application/json)
    + Attributes (ScheduleCreated)

### Get Schedule [GET /schedules/:id]

+ Request Get Schedule (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (Schedule)

### Update Schedule [POST /schedules/:id]

+ Request Update Schedule (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN
        
    + Attributes (ScheduleCommonParams)

+ Response 201 (application/json)
    + Attributes (Schedule)

### Delete Schedule [DELETE /schedules/:id]

+ Request Delete Schedule (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 204 (application/json)
    + Attributes (ScheduleDeleted)

### List Schedules [GET /schedules?page={page}&limit={limit}]

+ Request List Schedules (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Parameters
    + page: 1 (required, number) ... the page
    + limit: 10 (optional, number) ... number of items to return
        + Default: 50

+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + runs (array[Schedule])


## Crawlers [/crawlers]

A `Crawler` is a ready-made collection tool, which pick input from task
and provide result back.

### Get Crawler [GET /crawlers/:id]

+ Request Get Crawler (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (Crawler)

### Get Crawler Params [GET /crawlers/:id/params]

+ Request Get Crawler (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (CrawlerParams)

### List Crawlers [GET /crawlers?page={page}&limit={limit}]

+ Request List Crawlers (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Parameters
    + page: 1 (required, number) ... the page
    + limit: 10 (optional, number) ... number of items to return
        + Default: 50

+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) — total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + data (array[Crawler])

## Accounts [/accounts]

Some data collection needs you to be logged-in e.g. twitter, linkedin, facebook.
Register your `Account` here, and attach it to the `Cluster`.

### Create Account [POST /accounts]

+ Request Create Account (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

    + Attributes (AccountCommonParams)

+ Response 201 (application/json)
    + Attributes (AccountCreated)

### Get Account [GET /accounts/:id]

+ Request Get Account (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 200 (application/json)
    + Attributes (Account)

### Update Account [POST /accounts/:id]

+ Request Update Account (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

    + Attributes (UpdateAccountCommonParams)

+ Response 201 (application/json)
    + Attributes (AccountUpdated)
    

### Refresh Account [POST /accounts/:id/refresh]

+ Request Refresh Account (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 202 (application/json)
    + Attributes (AccountRefreshed)

### Delete Account [DELETE /accounts/:id]

+ Request Delete Account (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Response 204 (application/json)
    + Attributes (AccountDeleted)

### List Accounts [GET /accounts?page={page}&limit={limit}]

+ Request List Accounts (application/json)
    + Headers 
        Authorization: Token SECRET_TOKEN

+ Parameters
    + page: 1 (required, number) ... the page
    + limit: 10 (optional, number) ... number of items to return
        + Default: 50
        
+ Response 200 (application/json)
    + Attributes
      + count: 1 (number) — total number of items
      + page: 1 (required, number) - page number
      + limit: 10 (required, number) - number of items returned max
      + data (array[Account])


# Data Structures

## Cluster
+ id: `65b9eea6e1cc6bb9f0cd2a47751a186f` (required, string)
+ object: `cluster` (string)
+ account: `6fbfd5e68d3306e51350bea0232f8fa5` (required, string)
+ concurrency: `2` (required, number)
+ created_at: `2020-11-17T12:30:00` (required, string)
+ crawler: `e9619cf7d9a9a2da1fed1f25d32ca3ae` (required, string)
+ is_active: `true` (required, boolean)
+ name: `my-cool-cluster` (required, string)
+ params (required, ClusterCommonParams)
+ schedule: `3dbbddabf0a47a9c271ddf8c19a8dc09` (required, string)
+ total_runs: `123` (required, number)

## ClusterCreated
+ id: `65b9eea6e1cc6bb9f0cd2a47751a186f` (required, string)
+ object: `cluster` (string)
+ account: `6fbfd5e68d3306e51350bea0232f8fa5` (required, string)
+ concurrency: `2` (required, number)
+ created_at: `2020-11-17T12:30:00` (required, string)
+ crawler: `e9619cf7d9a9a2da1fed1f25d32ca3ae` (required, string)
+ is_active: `true` (required, boolean)
+ name: `my-cool-cluster` (required, string)
+ params (required, ClusterCommonParams)
+ schedule: `3dbbddabf0a47a9c271ddf8c19a8dc09` (required, string)

## ClusterDeleted
+ id: `65b9eea6e1cc6bb9f0cd2a47751a186f` (string)
+ object: `cluster` (string)
+ deleted: `true` (boolean)

## ClusterCommonAttribsCreation
+ account: `6fbfd5e68d3306e51350bea0232f8fa5` (required, string)
+ concurrency: `2` (optional, number)
+ crawler: `e9619cf7d9a9a2da1fed1f25d32ca3ae` (required, string)
+ name: `my-cool-cluster` (required, string)
+ params (required, ClusterCommonParams)
+ schedule: `3dbbddabf0a47a9c271ddf8c19a8dc09` (required, string)

## ClusterCommonAttribsUpdate
+ account: `6fbfd5e68d3306e51350bea0232f8fa5` (required, string)
+ concurrency: `2` (optional, number)
+ crawler: `e9619cf7d9a9a2da1fed1f25d32ca3ae` (required, string)
+ is_active: `false` (required, boolean)
+ name: `my-cool-cluster` (required, string)
+ params (required, ClusterCommonParams)
+ schedule: `3dbbddabf0a47a9c271ddf8c19a8dc09` (required, string)

## ClusterCommonParams
+ dropcontact: `true` (optional, boolean)
+ max_pages: `100` (optional, number)

## Task
+ id: `289dff07669d7a23de0ef88d2f7129e7` (required, string)
+ object: `task` (string)
+ created_at: `2020-11-17T12:30:00` (required, string) - date of creation (ISO8601 format)
+ is_active: `true` (required, boolean)
+ params (required, TaskCommonParams)
+ status: `running` (string)

## TaskCreated
+ id: `289dff07669d7a23de0ef88d2f7129e7` (required, string)
+ object: `task` (string)
+ created_at: `2020-11-17T12:30:00` (required, string) - date of creation (ISO8601 format)
+ is_active: `true` (required, boolean)
+ params (required, TaskCommonParams)
+ status: `pending` (string)

## TaskActivated
+ id: `289dff07669d7a23de0ef88d2f7129e7` (required, string)
+ object: `task` (string)
+ created_at: `2020-11-17T12:30:00` (required, string) - date of creation (ISO8601 format)
+ is_active: `true` (required, boolean)
+ params (required, TaskCommonParams)
+ status: `pending` (string)

## TaskDeactivated
+ id: `289dff07669d7a23de0ef88d2f7129e7` (required, string)
+ object: `task` (string)
+ created_at: `2020-11-17T12:30:00` (required, string) - date of creation (ISO8601 format)
+ is_active: `false` (required, boolean)
+ params (required, TaskCommonParams)
+ status: `deactivated` (string)

## TaskDeleted
+ id: `289dff07669d7a23de0ef88d2f7129e7` (string)
+ object: `task` (string)
+ deleted: `true` (boolean)

## CreateTaskParams
+ params (required, TaskCommonParams)

## TaskCommonParams
+ max_pages: `5` (optional, number)
+ results_per_page: `100` (optional, number)
+ url: `https://www.linkedin.com/sales/search/people?companySize=I` (optional, string)

## Crawler
+ id: `f0935e4cd5920aa6c7c996a5ee53a70f` (required, string) - unique id
+ object: `crawler` (string)
+ created_at: `2020-11-17T12:30:00` (required, string) - date of creation (ISO8601 format)
+ description: `Linkedin Sales Nav Profiles Export d:-o` (optional, string) - description
+ is_public: true (required, boolean) - public status 
+ labels: `sales-navigator` (optional, array[string]) - labels
+ max_concurrency: 100 (required, number) - total number of concurrent threads allowed within one cluster
+ name: `Sales Navigator Profiles Export` (required, string) - public name
+ rank: 1 (required, number) - position within the list of crawlers
+ slug: `linkedin-sales-nav-iter-profiles` (required, string) - unique slug 
+ updated_at: `2020-11-17T12:30:00` (required, string) - date of update (ISO8601 format)

## CrawlerParams
+ cluster (required, ClusterCrawlerParams) 
+ task (required, TaskCrawlerParams)

## ClusterCrawlerParams
+ account (required, AccountCrawlerParams)
+ dropcontact (object)
    + description: `if true, will enrich profile with dropcontact data e.g. mail, phone, siret` (string) 
    + type: `boolean` (optional, string)
    + default: `false` (optional, number)
    + required: `false` (optional, boolean)

## TaskCrawlerParams
+ max_pages: (object)
    + description: `max. pages the crawler will reach` (string)
    + type: `int` (optional, string)
    + default: `100` (optional, number)
    + required: `false` (optional, boolean)
+ results_per_page: (object)
    + description: `total results collected per page` (string) 
    + type: `int` (optional, string)
    + default: `25` (optional, number)
    + required: `false` (optional, boolean)
+ url (object)
    + description: `starting linkedin search URL` (string) 
    + type: `string` (optional, string)
    + default: `null` (optional, string)
    + required: `true` (optional, boolean)

## AccountCrawlerParams
+ email (object)
    + description: `email of the account` (string) 
    + type: `string` (optional, string)
    + default: `null` (optional, string)
    + required: `true` (optional, boolean)
+ password (object)
    + description: `password of the account` (string) 
    + type: `string` (optional, string)
    + default: `null` (optional, string)
    + required: `true` (optional, boolean)
+ type: `linkedin-sales-navigator` (required, string)

## Schedule
+ id: `c81e728d9d4c2f636f067f89cc14862c` (required, string) - unique id
+ object: `schedule` (string)
+ created_at: `2020-11-15T11:33:00` (optional, string) - date of creation (ISO8601 format)
+ cron_expression: `@daily` (required, string) - frequency of execution 
+ description: `cooool one :o` (optional, string)
+ last_run_at: `2020-11-16T12:30:00` (optional, string) - date of last run (ISO8601 format)
+ name: `my-cool-schedule` (required, string)
+ next_run_at: `2020-11-18T12:30:00` (optional, string) - date of next run (ISO8601 format)

## ScheduleCommonParams
+ cron_expression: `@daily` (required, string)
+ description: `cooool one :o` (optional, string)
+ name: `my-cool-schedule` (required, string)

## ScheduleCreated
+ id: `c81e728d9d4c2f636f067f89cc14862c` (required, string) - unique id
+ object: `schedule` (string)
+ created_at: `2020-11-15T11:33:00` (optional, string) - date of creation (ISO8601 format)
+ cron_expression: `@daily` (required, string) - frequency of execution 
+ description: `cooool one :o` (optional, string)
+ name: `my-cool-schedule` (required, string)

## ScheduleDeleted
+ id: `c81e728d9d4c2f636f067f89cc14862c` (string)
+ object: `schedule` (string)
+ deleted: `true` (boolean)

## Run
+ id: `d2ddea18f00665ce8623e36bd4e3c7c5` (required, string) - unique id
+ object: `run` (string)
+ created_at: `2020-11-15T11:33:00` (string) - date of creation (ISO8601 format)
+ download_link: `null` (string)
+ ended_at: `2020-11-18T13:30:00` (optional, string) - date of next run (ISO8601 format)
+ origin: `schedule` (required, string) — origin of the launch of the run
+ started_at: `2020-11-18T12:30:00` (optional, string) - date of next run (ISO8601 format)
+ status: `done` (required, string)

## RunCreated
+ id: `d2ddea18f00665ce8623e36bd4e3c7c5` (string)
+ object: `run` (string)
+ created_at: `2020-11-15T11:33:00` (string) - date of creation (ISO8601 format)
+ download_link: `null` (string)
+ ended_at: `null` (string)
+ origin: `user` (string)
+ started_at: `null` (string)
+ status: `running` (string)

## RunRestarted
+ id: `d2ddea18f00665ce8623e36bd4e3c7c5` (required, string) - unique id
+ object: `run` (string)
+ download_link: `null` (string)
+ ended_at: `null` (optional, string)
+ origin: `user` (required, string) — origin of the launch of the run
+ started_at: `2020-11-18T12:30:00` (optional, string) - date of next run (ISO8601 format)
+ status: `running` (required, string)

## RunAborted
+ id: `d2ddea18f00665ce8623e36bd4e3c7c5` (required, string) - unique id
+ created_at: `2020-11-18T11:30:00` (optional, string)
+ duration: `1 day, 4:14:56` (string)
+ object: `run` (string)
+ origin: `schedule` (string)
+ ended_at: `null` (optional, string)
+ origin: `schedule` (required, string) — origin of the launch of the run
+ started_at: `2020-11-18T12:30:00` (optional, string)
+ status: `done` (required, string)
+ status_reason: `aborted` (string)

## RunDeleted
+ id: `d2ddea18f00665ce8623e36bd4e3c7c5` (string)
+ object: `run` (string)
+ deleted: `true` (boolean)

## RunDownloaded
+ id: `d2ddea18f00665ce8623e36bd4e3c7c5` (required, string) - unique id
+ object: `run` (string)
+ download_link: `https://s3.eu-west-1.amazonaws.com/api.lobstr.io/lobstr9e0b62e6d277c90aa7d346de35b5f61d/1b0ffe2b7c3202633fbd23fe6bbe8dc1.xlsx` (string)
+ ended_at: `2020-11-18T13:30:00` (optional, string)
+ origin: `user` (required, string) — origin of the launch of the run
+ started_at: `2020-11-18T12:30:00` (optional, string) - date of next run (ISO8601 format)
+ status: `success` (required, string)

## RunStats
+ id: `d2ddea18f00665ce8623e36bd4e3c7c5` (required, string) - unique id
+ object: `run` (string)
+ duration: null (optional, string)
+ ended_at: null (optional, string)
+ eta: `00:29:11` (required, string)
+ is_done: `False` (required, boolean)
+ percent_done: `3.70%` (required, string)
+ started_at: `2021-05-05T08:56:35` (required, string)
+ total_requests: `768` (required, number)
+ total_results: `30857` (required, number)
+ total_tasks: `78` (required, number)
+ total_tasks_done: `76` (required, number)
+ total_tasks_left: `2` (required, number)
+ updated_at: `2021-05-05T08:56:35` (required, string)

## Result
+ id: `098f6bcd4621d373cade4e832627b4f6` (string)
+ object: `result` (string)
+ task: `289dff07669d7a23de0ef88d2f7129e7` (string)
+ run: `d2ddea18f00665ce8623e36bd4e3c7c5` (string)
+ first_name: `Sasha` (string)
+ last_name: `Bouloudnine` (string)
+ company_name: `lobstr` (string)
+ location: `Paris Area, France` (string)
+ position: `Co-founder` (string)
+ industry: `Internet` (string)
+ connections: `577` (number)
+ url: `https://www.linkedin.com/in/sasha-bouloudnine-51908286/` (string)
+ picture: `https://media-exp1.licdn.com/dms/image/C4E03AQHWe6qT_peEWg` (string)

## Account
+ id: `19bb1c73b0d628003dcd888f0820ece0` (required, string) — unique id
+ object: `account` (string)
+ created_at: `2020-11-15T11:33:00` (optional, string) - date of creation (ISO8601 format)
+ last_synchronization_time: `2020-11-18T12:30:00` (optional, string) - date of last synchronization (ISO8601 format)
+ name: `my-cool-account` (string)
+ status: `200` (required, number) — status code of the account
+ status_code_info: `success` (required, string) — short string with the status of the connection
+ status_code_description: `your account has been properly synchronized` (required, string) — detailed status description
+ total_synchronizations: `19` (optional, number) - total synchronizations
+ type: `linkedin-sales-navigator` (required, string)
+ updated_at: `2020-11-15T12:33:00` (optional, string) - date of creation (ISO8601 format)

## UpdateAccountCommonParams
+ name: `my-cool-account`
+ username: `sasha.bouloudnine@lobstr.io`
+ password: `no-privacy-no-mercy`

## AccountCommonParams
+ type: `linkedin-sales-navigator`
+ name: `my-cool-account`
+ username: `sasha.bouloudnine@lobstr.io`
+ password: `no-privacy-no-mercy`

## AccountCreated
+ id: `19bb1c73b0d628003dcd888f0820ece0` (required, string) — unique id
+ object: `account` (string)
+ created_at: `2020-11-15T11:33:00` (optional, string) - date of creation (ISO8601 format)
+ last_synchronization_time: `null` (optional, string)
+ name: `my-cool-account` (string)
+ status: `100` (required, number) — status code of the account
+ status_code_info: `pending` (required, string) — short string with the status of the connection
+ status_code_description: `your account needs to be synchronized` (required, string) — detailed status description
+ total_synchronizations: `0` (optional, number) - total synchronizations
+ type: `linkedin-sales-navigator` (required, string)
+ updated_at: `null` (optional, string)

## AccountUpdated
+ id: `19bb1c73b0d628003dcd888f0820ece0` (required, string) — unique id
+ object: `account` (string)
+ created_at: `2020-11-15T11:33:00` (optional, string) - date of creation (ISO8601 format)
+ last_synchronization_time: `null` (optional, string)
+ name: `my-cool-account` (string)
+ status: `100` (required, number) — status code of the account
+ status_code_info: `pending` (required, string) — short string with the status of the connection
+ status_code_description: `your account needs to be synchronized` (required, string) — detailed status description
+ type: `linkedin-sales-navigator` (required, string)
+ total_synchronizations: `0` (optional, number) - total synchronizations
+ updated_at: `2020-11-15T12:33:00` (optional, string) - date of creation (ISO8601 format)

## AccountRefreshed
+ id: `19bb1c73b0d628003dcd888f0820ece0` (required, string) — unique id
+ object: `account` (string)
+ created_at: `2020-11-15T11:33:00` (optional, string) - date of creation (ISO8601 format)
+ last_synchronization_time: `2020-11-15T13:33:00` (optional, string)
+ name: `my-cool-account` (string)
+ status: `300` (required, number) — status code of the account
+ status_code_info: `synchronizing` (required, string) — short string with the status of the connection
+ status_code_description: `your account is currently being synchronized` (required, string) — detailed status description
+ total_synchronizations: `1` (optional, number) - total synchronizations
+ type: `linkedin-sales-navigator` (required, string)
+ updated_at: `2020-11-15T12:33:00` (optional, string) - date of creation (ISO8601 format)

## AccountDeleted
+ id: `19bb1c73b0d628003dcd888f0820ece0` (string)
+ object: `account` (string)
+ deleted: `true` (boolean)

## RunTask
+ id: `05a671c66aefea124cc08b76ea6d30bb` (string)
+ object: `runtask` (string)
+ created_at: `2020-11-15T11:33:00` (string) - date of creation (ISO8601 format)
+ duration: `63` (number)
+ ended_at: `2020-11-15T11:34:03` (string) - date of creation (ISO8601 format)`
+ is_done: `True` (boolean)
+ is_error: `False`
+ last_page: `1` (number)
+ last_result: `25` (number)
+ task: `289dff07669d7a23de0ef88d2f7129e7` (string)
+ run: `d2ddea18f00665ce8623e36bd4e3c7c5` (string)
+ started_at: `2020-11-15T11:32:00` (string) - date of creation (ISO8601 format)
+ total_pages: `1` (number)
+ total_results: `25` (number)

## EmptiedCluster
+ id: `ecd72cc09f5405c77b635efb9c757b82` (string)
+ object: `cluster` (string)
+ emptied: `true` (boolean)
