/*
Lobstr

Testing MiscApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lobstrio

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/esgi-lyon/go-parrallel-train/api/lobstrio"
)

func Test_lobstrio_MiscApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MiscApiService Activatetask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.MiscApi.Activatetask(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService CreatetaskNotadded", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MiscApi.CreatetaskNotadded(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService Getcluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		httpRes, err := apiClient.MiscApi.Getcluster(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService Getresult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resultId string

		httpRes, err := apiClient.MiscApi.Getresult(context.Background(), resultId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService Listcluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MiscApi.Listcluster(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService Listruns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MiscApi.Listruns(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService Runcluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MiscApi.Runcluster(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService Updatecluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		httpRes, err := apiClient.MiscApi.Updatecluster(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MiscApiService Viewrun", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runId string

		httpRes, err := apiClient.MiscApi.Viewrun(context.Background(), runId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
